version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: eve-trading-postgres
    environment:
      POSTGRES_DB: eve_trading
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache
  redis:
    image: redis:7-alpine
    container_name: eve-trading-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Services
  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    container_name: eve-trading-auth
    ports:
      - '3001:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/eve_trading
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/auth-service:/app
      - /app/node_modules

  market-service:
    build:
      context: .
      dockerfile: services/market-service/Dockerfile
    container_name: eve-trading-market
    ports:
      - '3002:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/eve_trading
      - REDIS_URL=redis://redis:6379
      - ESI_BASE_URL=https://esi.evetech.net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/market-service:/app
      - /app/node_modules

  trading-service:
    build:
      context: .
      dockerfile: services/trading-service/Dockerfile
    container_name: eve-trading-trading
    ports:
      - '3003:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/eve_trading
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/trading-service:/app
      - /app/node_modules

  ai-service:
    build:
      context: .
      dockerfile: services/ai-service/Dockerfile
    container_name: eve-trading-ai
    ports:
      - '3004:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./services/ai-service:/app
      - /app/node_modules

  notification-service:
    build:
      context: .
      dockerfile: services/notification-service/Dockerfile
    container_name: eve-trading-notification
    ports:
      - '3005:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/eve_trading
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/notification-service:/app
      - /app/node_modules

  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    container_name: eve-trading-user
    ports:
      - '3006:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/eve_trading
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/user-service:/app
      - /app/node_modules

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: eve-trading-network
