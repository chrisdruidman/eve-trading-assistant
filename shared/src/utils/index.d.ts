export declare const formatCurrency: (amount: number) => string;
export declare const formatISK: (amount: number) => string;
export declare const formatNumber: (num: number, decimals?: number) => string;
export declare const formatPercentage: (value: number, decimals?: number) => string;
export declare const formatDuration: (milliseconds: number) => string;
export declare const sleep: (ms: number) => Promise<void>;
export declare const formatDate: (date: Date) => string;
export declare const formatRelativeTime: (date: Date) => string;
export declare const isDateExpired: (date: Date) => boolean;
export declare const addDays: (date: Date, days: number) => Date;
export declare const addHours: (date: Date, hours: number) => Date;
export declare const calculateProfitMargin: (buyPrice: number, sellPrice: number) => number;
export declare const calculateProfit: (buyPrice: number, sellPrice: number, quantity?: number) => number;
export declare const calculateROI: (profit: number, investment: number) => number;
export declare const calculateBreakEvenPrice: (buyPrice: number, fees?: number) => number;
export declare const calculateTaxes: (amount: number, taxRate?: number) => number;
export declare const calculateBrokerFees: (amount: number, feeRate?: number) => number;
export declare const calculateNetProfit: (buyPrice: number, sellPrice: number, quantity: number, taxRate?: number, brokerFeeRate?: number) => number;
export declare const calculateRiskScore: (volatility: number, liquidity: number, marketDepth: number) => number;
export declare const getRiskLevel: (riskScore: number) => "LOW" | "MEDIUM" | "HIGH";
export declare const calculateConfidenceScore: (dataAge: number, sampleSize: number, volatility: number) => number;
export declare const chunk: <T>(array: T[], size: number) => T[][];
export declare const groupBy: <T, K extends keyof any>(array: T[], key: (item: T) => K) => Record<K, T[]>;
export declare const sortBy: <T>(array: T[], key: keyof T | ((item: T) => any), order?: "asc" | "desc") => T[];
export declare const unique: <T>(array: T[], key?: keyof T | ((item: T) => any)) => T[];
export declare const average: (numbers: number[]) => number;
export declare const median: (numbers: number[]) => number;
export declare const standardDeviation: (numbers: number[]) => number;
export declare const slugify: (text: string) => string;
export declare const truncate: (text: string, length: number, suffix?: string) => string;
export declare const capitalize: (text: string) => string;
export declare const camelCase: (text: string) => string;
export declare const kebabCase: (text: string) => string;
export declare const validateApiKey: (key: string) => boolean;
export declare const validateEmail: (email: string) => boolean;
export declare const validateUrl: (url: string) => boolean;
export declare const isValidNumber: (value: any) => value is number;
export declare const isPositiveNumber: (value: any) => value is number;
export declare const isNonNegativeNumber: (value: any) => value is number;
export declare const createCacheKey: (...parts: (string | number)[]) => string;
export declare const hashString: (str: string) => string;
export declare const retry: <T>(fn: () => Promise<T>, maxAttempts?: number, baseDelay?: number, backoffMultiplier?: number) => Promise<T>;
export * from './encryption';
export * from './errors';
export * from './validation';
export * from './logging';
//# sourceMappingURL=index.d.ts.map